CREATE SEQUENCE id_user INCREMENT BY 1;
CREATE SEQUENCE id_test INCREMENT BY 1;
CREATE SEQUENCE id_question INCREMENT BY 1;
CREATE SEQUENCE id_answer_option INCREMENT BY 1;
CREATE SEQUENCE id_testing INCREMENT BY 1;
CREATE SEQUENCE id_answer_user  INCREMENT BY 1;

CREATE TYPE yorn AS enum('N', 'Y');
CREATE TYPE markerAU AS enum('latest');

create table alluser(
	id_user integer DEFAULT NEXTVAL('id_user'),
	last_name character(50),
	first_name character(50),
	email character(50),
	login character(50) NOT NULL CONSTRAINT must_be_different_login UNIQUE,
	password character(50) NULL,
	ldap_user integer DEFAULT 0,
CONSTRAINT must_be_different_lastName_firstName UNIQUE(last_name, first_name),
constraint user_pkeys primary key (id_user));

create table role (
	id_role integer not null,
	description_role character (50) NOT NULL CONSTRAINT must_be_different_description_role UNIQUE,
constraint role_pkey primary key (id_role)
);

create table role_user (
	id_role integer not null,
	id_user integer not null,
CONSTRAINT must_be_different_role_user UNIQUE(id_role, id_user),
constraint role_user_fkey foreign key (id_role) references role(id_role),
constraint user_role_fkey foreign key (id_user) references alluser(id_user));
create table status_test(
	id_status_test integer not null,
	description_status_test character(50) not null,
constraint status_test_pkey primary key (id_status_test)
);
create table test (
	id_test integer DEFAULT NEXTVAL('id_test'),
	topic character(150) not null,
	time_limit interval null,
	comment_test character(150) null,
	see_the_result yorn not null,
	see_details yorn not null,
	id_status_test integer not null,
	author_test integer not null,
CONSTRAINT must_be_different_test UNIQUE(topic, time_limit, comment_test, see_the_result, see_details, id_status_test, author_test),
constraint author_test_fkey foreign key (author_test) references alluser(id_user),
constraint status_test_fkey foreign key (id_status_test) references status_test(id_status_test),
constraint test_pkey primary key(id_test)
);

create table interviewees (
	id_test integer not null,
	id_user integer null,
	group_ldap character(1000) null,
CONSTRAINT test_interviewees_fkey foreign key(id_test) references test(id_test),
CONSTRAINT user_interviewees_fkey foreign key (id_user) references alluser (id_user)
);
create table type_the_questions (
	id_questions_type integer not null,
	description_questions_type character(100) NOT NULL CONSTRAINT must_be_different_answer_type UNIQUE,
constraint answer_type_pkey primary key (id_questions_type)
);
create table questions (
	id_question integer DEFAULT NEXTVAL('id_question'),
	text_question text not null,
	id_questions_type integer not null,	
	comment_question character(100) null,
	question_number integer null,
	id_test integer not null,
constraint question_pkey primary key (id_question),
constraint test_questions_fkey foreign key (id_test) references test (id_test),
constraint answer_type_fkey foreign key (id_questions_type) references type_the_questions(id_questions_type)
);
create table answer_options(
	id_answer_option integer DEFAULT NEXTVAL('id_answer_option'),
        id_question integer not null,
	answer_the_questions character(1000) NULL,
	right_answer yorn not null,
constraint answer_the_questions_pkey primary key (id_answer_option),
constraint question_answer_fkey foreign key (id_question) references questions(id_question)
);
create table mark_test(
	id_mark_test integer not null,
	description_mark_test character(50) not null,
constraint mark_test_pkey primary key (id_mark_test)
);

create table testing (
	id_testing integer DEFAULT NEXTVAL('id_testing'),
	id_user integer not null,
	id_test integer not null,
	id_mark_test integer not null,
	datetime_start_test timestamp null,
	datetime_end_test timestamp null,
constraint testing_pkeys primary key (id_testing),
CONSTRAINT must_be_different_testing UNIQUE(id_user, id_test),
constraint user_testing_fkey foreign key (id_user) references alluser(id_user),
constraint test_testing_fkey foreign key (id_test) references test (id_test),
constraint mark_test_testing_fkey foreign key (id_mark_test) references mark_test (id_mark_test)
);
create table answer_users (
	id_testing integer not null,
	id_question integer not null,	
	answer_user character(1000) null,
	marker_quiz markerAU null,
CONSTRAINT must_be_different_answer_users UNIQUE(id_testing, id_question),
constraint question_answer_users_fkey foreign key (id_question) references questions(id_question),
constraint testing_answer_fkey foreign key (id_testing) references testing (id_testing)
);
create table result(
	id_testing integer not null,
	percent_of_right_answers integer null,
	right_answers character(1000) null,
	wrong_answers character(1000) null,
constraint testing_result_fkey foreign key (id_testing) references testing (id_testing)
);

insert into role values
	(1, 'Опрашиваемый'),
	(2, 'Составитель опросов'),
	(3, 'Администратор');

insert into status_test values
	(1, 'Редактируемый'),
	(2, 'Готов к опубликованию'),
	(3, 'Активный'),
	(4, 'Завершённый');

insert into type_the_questions values
	(1, 'Вопрос, предлогающий ответ типа Да/Нет/Не знаю'),
	(2, 'Вопрос с возможностью выбора одного ответа из списка'),
	(3, 'Вопрос с возможностью выбора одного или более ответов из списка'),
	(4, 'Вопрос, предполагающий написание ответа в виде произвольного текста длиной до 1000 символов');
insert into mark_test values
		(1, 'Доступный'),
		(2, 'Неоконченный'),
		(3, 'Не доступный'),
		(4, 'Законченный');

insert into alluser(last_name, first_name, email, login, password) values
	('Иван', 'Иванов', 'admin@mail.ru', 'Иван', 'c4ca4238a0b923820dcc509a6f75849b'),
	('Михаил', 'Тюбиков', 'compiler@mail.ru', 'Михаил', 'c81e728d9d4c2f636f067f89cc14862c'),
	('Сергей', 'Иванов', 'test@mail.ru', 'Сергей', 'eccbc87e4b5ce2fe28308fd9f2a7baf3');

insert into role_user values(1, 6);

insert into test(topic, comment_test, see_the_result, see_details, id_status_test, author_test) values 
	('test', 'Для тестирования', 'Y', 'Y', 3, 6);

insert into interviewees (id_test, id_user) values
	(3, 6),
	(3, 28);

insert into testing(id_user, id_test, id_mark_test) values 
	(6, 3, 1);

insert into questions(text_question, id_questions_type, comment_question, id_test) values
	('Это тест', '1', 'test', 3),
	('Ваш комментари', '4', 'test', 3);	

insert into answer_options(id_question, answer_the_questions, right_answer) values 
	(3, 'Y', 'Y');